# 평점 1~2점 부정 리뷰 크롤링
import pandas as pd
import time
from tqdm import tqdm_notebook
import warnings
warnings.filterwarnings('ignore')
from selenium.common.exceptions import NoSuchElementException
from selenium import webdriver
from selenium.webdriver.common.by import By

# 제품 상세페이지 url
url = "url_링크"

driver = webdriver.Chrome()
driver.get(url)

# 데이터 프레임 생성
df_review_cos1 = pd.DataFrame(columns=['date', 'rate', 'id', 'select_1_title', 'select_1_content', 'select_2_title', 'select_2_content', 'select_3_title', 'select_3_content', 'txt'])
df_review_cos1

# 리뷰 탭 클릭
review_tab = driver.find_element(By.CSS_SELECTOR, 'a.goods_reputation')
review_tab.click()
time.sleep(1)

# 리뷰검색필터 탭 클릭
review_tab = driver.find_element(By.CSS_SELECTOR, 'div#searchType button.btnOption')
review_tab.click()
time.sleep(1)

# 2점, 1점 탭 클릭
two_point = driver.find_element(By.CSS_SELECTOR, 'ul#searchPoint #point_type1_5')      # 2점 탭
two_point.click()    # Message: element not interactable 에러 뜸
print(two_point)
time.sleep(1)
driver.find_element(By.CSS_SELECTOR, 'div.popCont #point_type1_6').click()      # 1점 탭
time.sleep(1)

# 적용 버튼 클릭
driver.find_element(By.CSS_SELECTOR, 'div.area1sButton > button.btnClose').click()
time.sleep(1)
print("부정 리뷰 선택 완료")
driver.quit()

# 부정 리뷰 크롤링 함수
def review_crawling(df, page_num):
    for current_page in range(1, page_num+1):  # 리뷰의 인덱스는 한 페이지 내에서 1~10까지 존재
        for i in range(1, 11):  # 한 페이지 내 10개 리뷰 크롤링
            try:
                date = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.score_area > span.date').text
                print(date)
                rate = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.score_area > span.review_point > span').text
                print(rate)
                id = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.info > div > p.info_user > a.id').text
                print(id)
                select_1_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(1) > dt > span').text
                print(select_1_title)
                select_1_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(1) > dd > span').text
                print(select_1_content)
                select_2_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(2) > dt > span').text
                print(select_2_title)
                select_2_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(2) > dd > span').text
                print(select_2_content)
                select_3_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(3) > dt > span').text
                print(select_3_title)
                select_3_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(3) > dd > span').text
                print(select_3_content)
                txt = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.txt_inner').text
                print(txt)
                df.loc[len(df)] = [date, rate, id, select_1_title, select_1_content, select_2_title, select_2_content, select_3_title, select_3_content, txt]
                print('-'*60)
            except NoSuchElementException:
                pass

        try:
            if current_page % 10 != 0: # 현재 페이지가 10의 배수가 아닐 때
                if current_page == page_num:       # 맨 마지막 리뷰 크롤링 안 되는 이슈 해결
                    print('맨 마지막의 리뷰까지 크롤링 성공')
                    break
        
                page_button = driver.find_element(By.CSS_SELECTOR, f'#gdasContentsArea > div > div.pageing > a:nth-child({current_page%10+1})')  # 다음 페이지 버튼 클릭
                page_button.click()
                time.sleep(2)
            else:  # 현재 페이지가 10의 배수일 때
                if current_page == page_num:
                    print('맨 마지막의 리뷰까지 크롤링 성공')
                    break
                    
                next_button = driver.find_element(By.CSS_SELECTOR, '#gdasContentsArea > div > div.pageing > a.next')
                next_button.click()   # 맨 마지막 페이지일 경우, 페이지 넘김 버튼 클릭
                time.sleep(2)
        except NoSuchElementException:
            print("Element not found")

        print(f'{current_page}페이지 크롤링 완료')

review_crawling(df_review_cos1, 38)
df_review_cos1.to_csv('C:/semi_project/부정리뷰.csv', index=False, encoding='utf-8')
print("부정 리뷰 크롤링 완료 및 데이터 저장")
driver.quit()
