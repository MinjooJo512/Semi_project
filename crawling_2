# 평점 4~5점 긍정 리뷰 크롤링
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait          # element not interactable 에러 메시지 이슈  ->  WebDriverWait 추가하는 것으로 해결
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd

# 제품 상세페이지 url
url = "url_링크"

# Selenium WebDriver 설정
driver = webdriver.Chrome()
driver.get(url)

df_review_cos1 = pd.DataFrame(columns=['date', 'rate', 'id', 'select_1_title', 'select_1_content', 'select_2_title', 'select_2_content', 'select_3_title', 'select_3_content', 'txt'])

# 리뷰 탭 클릭
review_tab = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, 'a.goods_reputation'))
)
review_tab.click()
time.sleep(1)

# 리뷰 필터 탭 클릭
filter_tab = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, 'div#searchType button.btnOption'))
)
filter_tab.click()
time.sleep(1)

# 필터 팝업이 나타날 때까지 대기
filter_popup = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.CSS_SELECTOR, 'div.popCont'))
)

# 5점 필터 클릭
two_point_label = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, 'label[for="point_type1_2"]'))
)
two_point_label.click()
time.sleep(1)

# 4점 필터 클릭
one_point_label = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, 'label[for="point_type1_3"]'))
)
one_point_label.click()
time.sleep(1)

# 적용 버튼 클릭
apply_button = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, 'div.area1sButton a#btnFilterConfirm'))
)
apply_button.click()
time.sleep(1)

# 긍정 리뷰 크롤링 함수
def review_crawling(df, page_num):
    for current_page in range(1, page_num+1):  # 리뷰의 인덱스는 한 페이지 내에서 1~10까지 존재
        for i in range(1, 11):  # 한 페이지 내 10개 리뷰 크롤링
            try:
                date = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.score_area > span.date').text
                print(date)
                rate = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.score_area > span.review_point > span').text
                print(rate)
                id = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.info > div > p.info_user > a.id').text
                print(id)
                select_1_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(1) > dt > span').text
                print(select_1_title)
                select_1_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(1) > dd > span').text
                print(select_1_content)
                select_2_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(2) > dt > span').text
                print(select_2_title)
                select_2_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(2) > dd > span').text
                print(select_2_content)
                select_3_title = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(3) > dt > span').text
                print(select_3_title)
                select_3_content = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.poll_sample > dl:nth-child(3) > dd > span').text
                print(select_3_content)
                txt = driver.find_element(By.CSS_SELECTOR, f'#gdasList > li:nth-child({i}) > div.review_cont > div.txt_inner').text
                print(txt)
                df.loc[len(df)] = [date, rate, id, select_1_title, select_1_content, select_2_title, select_2_content, select_3_title, select_3_content, txt]
                print(len(df))
                print('-'*60)
            except NoSuchElementException:
                pass

        try:
            if current_page % 10 != 0:   # 현재 페이지가 10의 배수가 아닐 때
                if current_page == page_num:
                    print('맨 마지막의 리뷰까지 크롤링 성공')
                    break

                page_button = driver.find_element(By.CSS_SELECTOR, f'#gdasContentsArea > div > div.pageing > a:nth-child({current_page%10+1})')
                page_button.click()
                time.sleep(2)
            else:    # 현재 페이지가 10의 배수일 때
                if current_page == page_num:
                    print('맨 마지막의 리뷰까지 크롤링 성공')
                    break

                next_button = driver.find_element(By.CSS_SELECTOR, '#gdasContentsArea > div > div.pageing > a.next')
                next_button.click()      # 페이지 넘김 버튼 클릭
                time.sleep(2)
        except NoSuchElementException:
            print("Element not found")

        print(f'{current_page}페이지 크롤링 완료')

review_crawling(df_review_cos1, 100)
df_review_cos1.to_csv('C:/semi_project/긍정리뷰.csv', index=False, encoding='utf-8')
print("긍정 크롤링 완료 및 데이터 저장")
driver.quit()
